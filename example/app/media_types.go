// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goagen_js": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/shirou/goagen_js/example/design
// --out=$(GOPATH)src/github.com/shirou/goagen_js/example
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
)

// Validate test (default view)
//
// Identifier: application/vnd.inttest+json; view=default
type Inttest struct {
	Int      *int  `form:"int,omitempty" json:"int,omitempty" xml:"int,omitempty"`
	IntArray []int `form:"int_array,omitempty" json:"int_array,omitempty" xml:"int_array,omitempty"`
	IntEnum  *int  `form:"int_enum,omitempty" json:"int_enum,omitempty" xml:"int_enum,omitempty"`
	// max
	IntMax      *int `form:"int_max,omitempty" json:"int_max,omitempty" xml:"int_max,omitempty"`
	IntMin      *int `form:"int_min,omitempty" json:"int_min,omitempty" xml:"int_min,omitempty"`
	IntMinmax   *int `form:"int_minmax,omitempty" json:"int_minmax,omitempty" xml:"int_minmax,omitempty"`
	IntRequired int  `form:"int_required" json:"int_required" xml:"int_required"`
}

// Validate validates the Inttest media type instance.
func (mt *Inttest) Validate() (err error) {
	if mt.IntEnum != nil {
		if !(*mt.IntEnum == 1 || *mt.IntEnum == 2 || *mt.IntEnum == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.int_enum`, *mt.IntEnum, []interface{}{1, 2, 3}))
		}
	}
	if mt.IntMax != nil {
		if *mt.IntMax > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.int_max`, *mt.IntMax, 10, false))
		}
	}
	if mt.IntMin != nil {
		if *mt.IntMin < -1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.int_min`, *mt.IntMin, -1, true))
		}
	}
	if mt.IntMinmax != nil {
		if *mt.IntMinmax < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.int_minmax`, *mt.IntMinmax, 0, true))
		}
	}
	if mt.IntMinmax != nil {
		if *mt.IntMinmax > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.int_minmax`, *mt.IntMinmax, 10, false))
		}
	}
	return
}

// Validate test (secret view)
//
// Identifier: application/vnd.inttest+json; view=secret
type InttestSecret struct {
	Int *int `form:"int,omitempty" json:"int,omitempty" xml:"int,omitempty"`
	// not included in default
	IntSecret *int `form:"int_secret,omitempty" json:"int_secret,omitempty" xml:"int_secret,omitempty"`
}
