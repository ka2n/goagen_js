// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goagen_js": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/shirou/goagen_js/example/design
// --out=$(GOPATH)src/github.com/shirou/goagen_js/example
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// FilesController is the controller interface for the Files actions.
type FilesController interface {
	goa.Muxer
	goa.FileServer
}

// MountFilesController "mounts" a Files resource controller on the given service.
func MountFilesController(service *goa.Service, ctrl FilesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/assets/*filepath", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/assets/*filepath", "example/assets")
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/assets/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "files", "example/assets", "route", "GET /assets/*filepath")

	h = ctrl.FileHandler("/", "example/index.html")
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "files", "example/index.html", "route", "GET /")

	h = ctrl.FileHandler("/assets/", "example/assets/index.html")
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/assets/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "files", "example/assets/index.html", "route", "GET /assets/")
}

// handleFilesOrigin applies the CORS response headers corresponding to the origin.
func handleFilesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// GetController is the controller interface for the Get actions.
type GetController interface {
	goa.Muxer
	GetInt(*GetIntGetContext) error
	PathParams(*PathParamsGetContext) error
	Without(*WithoutGetContext) error
}

// MountGetController "mounts" a Get resource controller on the given service.
func MountGetController(service *goa.Service, ctrl GetController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/get/int", ctrl.MuxHandler("preflight", handleGetOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/get/int/:ParamInt/:ParamStr", ctrl.MuxHandler("preflight", handleGetOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/get", ctrl.MuxHandler("preflight", handleGetOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIntGetContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetInt(rctx)
	}
	h = handleGetOrigin(h)
	service.Mux.Handle("GET", "/get/int", ctrl.MuxHandler("get_int", h, nil))
	service.LogInfo("mount", "ctrl", "Get", "action", "GetInt", "route", "GET /get/int")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPathParamsGetContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.PathParams(rctx)
	}
	h = handleGetOrigin(h)
	service.Mux.Handle("GET", "/get/int/:ParamInt/:ParamStr", ctrl.MuxHandler("path_params", h, nil))
	service.LogInfo("mount", "ctrl", "Get", "action", "PathParams", "route", "GET /get/int/:ParamInt/:ParamStr")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWithoutGetContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Without(rctx)
	}
	h = handleGetOrigin(h)
	service.Mux.Handle("GET", "/get", ctrl.MuxHandler("without", h, nil))
	service.LogInfo("mount", "ctrl", "Get", "action", "Without", "route", "GET /get")
}

// handleGetOrigin applies the CORS response headers corresponding to the origin.
func handleGetOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
