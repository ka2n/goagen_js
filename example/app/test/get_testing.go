// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goagen_js": get TestHelpers
//
// Command:
// $ goagen
// --design=github.com/shirou/goagen_js/example/design
// --out=$(GOPATH)src/github.com/shirou/goagen_js/example
// --version=v1.2.0-dirty

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/shirou/goagen_js/example/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// GetIntGetInternalServerError runs the method GetInt of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetIntGetInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, int_ *int, intArray []int, intEnum *int, intMax *int, intMin *int, intMinmax *int, intRequired int, intSecret *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		query["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		query["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		query["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		query["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		query["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		query["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		query["int_secret"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/get/int"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		prms["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		prms["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		prms["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		prms["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		prms["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		prms["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		prms["int_secret"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	getIntCtx, _err := app.NewGetIntGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.GetInt(getIntCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// GetIntGetOK runs the method GetInt of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetIntGetOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, int_ *int, intArray []int, intEnum *int, intMax *int, intMin *int, intMinmax *int, intRequired int, intSecret *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		query["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		query["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		query["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		query["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		query["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		query["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		query["int_secret"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/get/int"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		prms["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		prms["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		prms["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		prms["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		prms["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		prms["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		prms["int_secret"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	getIntCtx, _err := app.NewGetIntGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.GetInt(getIntCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}

	// Return results
	return rw
}

// GetIntGetUnauthorized runs the method GetInt of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetIntGetUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, int_ *int, intArray []int, intEnum *int, intMax *int, intMin *int, intMinmax *int, intRequired int, intSecret *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		query["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		query["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		query["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		query["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		query["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		query["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		query["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		query["int_secret"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/get/int"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if int_ != nil {
		sliceVal := []string{strconv.Itoa(*int_)}
		prms["int"] = sliceVal
	}
	{
		sliceVal := make([]string, len(intArray))
		for i, v := range intArray {
			sliceVal[i] = fmt.Sprintf("%v", v)
		}
		prms["int_array"] = sliceVal
	}
	if intEnum != nil {
		sliceVal := []string{strconv.Itoa(*intEnum)}
		prms["int_enum"] = sliceVal
	}
	if intMax != nil {
		sliceVal := []string{strconv.Itoa(*intMax)}
		prms["int_max"] = sliceVal
	}
	if intMin != nil {
		sliceVal := []string{strconv.Itoa(*intMin)}
		prms["int_min"] = sliceVal
	}
	if intMinmax != nil {
		sliceVal := []string{strconv.Itoa(*intMinmax)}
		prms["int_minmax"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(intRequired)}
		prms["int_required"] = sliceVal
	}
	if intSecret != nil {
		sliceVal := []string{strconv.Itoa(*intSecret)}
		prms["int_secret"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	getIntCtx, _err := app.NewGetIntGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.GetInt(getIntCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}

	// Return results
	return rw
}

// PathParamsGetInternalServerError runs the method PathParams of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PathParamsGetInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, paramInt int, paramStr string, payload *app.PathParamsGetPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get/int/%v/%v", paramInt, paramStr),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["ParamInt"] = []string{fmt.Sprintf("%v", paramInt)}
	prms["ParamStr"] = []string{fmt.Sprintf("%v", paramStr)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	pathParamsCtx, _err := app.NewPathParamsGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}
	pathParamsCtx.Payload = payload

	// Perform action
	_err = ctrl.PathParams(pathParamsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// PathParamsGetOK runs the method PathParams of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PathParamsGetOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, paramInt int, paramStr string, payload *app.PathParamsGetPayload) (http.ResponseWriter, *app.Inttest) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get/int/%v/%v", paramInt, paramStr),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["ParamInt"] = []string{fmt.Sprintf("%v", paramInt)}
	prms["ParamStr"] = []string{fmt.Sprintf("%v", paramStr)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	pathParamsCtx, _err := app.NewPathParamsGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}
	pathParamsCtx.Payload = payload

	// Perform action
	_err = ctrl.PathParams(pathParamsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.Inttest
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.Inttest)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.Inttest", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// PathParamsGetOKSecret runs the method PathParams of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PathParamsGetOKSecret(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, paramInt int, paramStr string, payload *app.PathParamsGetPayload) (http.ResponseWriter, *app.InttestSecret) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get/int/%v/%v", paramInt, paramStr),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["ParamInt"] = []string{fmt.Sprintf("%v", paramInt)}
	prms["ParamStr"] = []string{fmt.Sprintf("%v", paramStr)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	pathParamsCtx, _err := app.NewPathParamsGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}
	pathParamsCtx.Payload = payload

	// Perform action
	_err = ctrl.PathParams(pathParamsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.InttestSecret
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.InttestSecret)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.InttestSecret", resp)
		}
	}

	// Return results
	return rw, mt
}

// PathParamsGetUnauthorized runs the method PathParams of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PathParamsGetUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController, paramInt int, paramStr string, payload *app.PathParamsGetPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get/int/%v/%v", paramInt, paramStr),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["ParamInt"] = []string{fmt.Sprintf("%v", paramInt)}
	prms["ParamStr"] = []string{fmt.Sprintf("%v", paramStr)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	pathParamsCtx, _err := app.NewPathParamsGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}
	pathParamsCtx.Payload = payload

	// Perform action
	_err = ctrl.PathParams(pathParamsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}

	// Return results
	return rw
}

// WithoutGetInternalServerError runs the method Without of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func WithoutGetInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	withoutCtx, _err := app.NewWithoutGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Without(withoutCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// WithoutGetOK runs the method Without of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func WithoutGetOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController) (http.ResponseWriter, *app.Inttest) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	withoutCtx, _err := app.NewWithoutGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Without(withoutCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.Inttest
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.Inttest)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.Inttest", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// WithoutGetOKSecret runs the method Without of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func WithoutGetOKSecret(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController) (http.ResponseWriter, *app.InttestSecret) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	withoutCtx, _err := app.NewWithoutGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Without(withoutCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.InttestSecret
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.InttestSecret)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.InttestSecret", resp)
		}
	}

	// Return results
	return rw, mt
}

// WithoutGetUnauthorized runs the method Without of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func WithoutGetUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.GetController) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/get"),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "GetTest"), rw, req, prms)
	withoutCtx, _err := app.NewWithoutGetContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Without(withoutCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}

	// Return results
	return rw
}
