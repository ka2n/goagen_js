// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goagen_js": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/shirou/goagen_js/example/design
// --out=$(GOPATH)src/github.com/shirou/goagen_js/example
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserPayload is the user create action payload.
type createUserPayload struct {
	Age   *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Sex   *string `form:"sex,omitempty" json:"sex,omitempty" xml:"sex,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Age != nil {
		if *payload.Age < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.age`, *payload.Age, 20, true))
		}
	}
	if payload.Age != nil {
		if *payload.Age > 70 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.age`, *payload.Age, 70, false))
		}
	}
	if payload.Email != nil {
		if ok := goa.ValidatePattern(`/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/`, *payload.Email); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.email`, *payload.Email, `/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/`))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 4, true))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) > 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 16, false))
		}
	}
	if payload.Sex != nil {
		if !(*payload.Sex == "male" || *payload.Sex == "female" || *payload.Sex == "other") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.sex`, *payload.Sex, []interface{}{"male", "female", "other"}))
		}
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (payload *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if payload.Age != nil {
		pub.Age = payload.Age
	}
	if payload.Email != nil {
		pub.Email = payload.Email
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Sex != nil {
		pub.Sex = payload.Sex
	}
	return &pub
}

// CreateUserPayload is the user create action payload.
type CreateUserPayload struct {
	Age   *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Name  string  `form:"name" json:"name" xml:"name"`
	Sex   *string `form:"sex,omitempty" json:"sex,omitempty" xml:"sex,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Age != nil {
		if *payload.Age < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.age`, *payload.Age, 20, true))
		}
	}
	if payload.Age != nil {
		if *payload.Age > 70 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.age`, *payload.Age, 70, false))
		}
	}
	if payload.Email != nil {
		if ok := goa.ValidatePattern(`/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/`, *payload.Email); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.email`, *payload.Email, `/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/`))
		}
	}
	if utf8.RuneCountInString(payload.Name) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 4, true))
	}
	if utf8.RuneCountInString(payload.Name) > 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 16, false))
	}
	if payload.Sex != nil {
		if !(*payload.Sex == "male" || *payload.Sex == "female" || *payload.Sex == "other") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`raw.sex`, *payload.Sex, []interface{}{"male", "female", "other"}))
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["UserID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("UserID", rawUserID, "integer"))
		}
		if rctx.UserID > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`UserID`, rctx.UserID, 10000, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
